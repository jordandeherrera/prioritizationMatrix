{
    "collab_server" : "",
    "contents" : "#' Read Values\n#'\n#' This is a simple function that provides a prompt to the user to enter in values. These will be \n#' the names of columns for the priority matrix.  No parameters are taken for this function.\n#'\n#' \n#' @return This function does not return any values.  Instead, it save an array character object based\n#' on the user's input.  \n#'\n#' @examples\n#' readValues()\n#' Contribution, Certainty, Connection\n#' #Value available in global variable values = c(\"Contribution\",\"Certainty\",\"Connection\")\n#'\n#' @export\nreadValues <- function()\n{\n  values <<- NULL\n  \n  cat (\"Enter in names of values separated by commas and spaces (i.e., Goal1, Goal2, Goal3, etc.\")\n  values <<- readline()\n  values <<- unlist(strsplit(values, split=\", \"))\n}\n\n#' Read Priorities\n#'\n#' This is a simple function that provides a prompt to the user to enter in priorities. These will be \n#' the names of rows for the priority matrix.  No parameters are taken for this function.\n#'\n#' \n#' @return This function does not return any values.  Instead, it save an array character object based\n#' on the user's input.  \n#'\n#' @examples\n#' readPriorities()\n#' Professional certifications, On the job learning, Mentorship\n#' #Value available in global variable priorities = c(\"Professional certifications\",\"On the job learning\",\"Mentorship\")\n#'\n#' @export\nreadPriorities <- function()\n{\n  priorities <<- NULL\n  \n  cat (\"Enter in names of priorities separated by commas and spaces (i.e., Priority1, Priority2, etc.\")\n  priorities <<- readline()\n  priorities <<- unlist(strsplit(priorities, split=\", \"))\n}\n\nvaluesImportance <- function(arrayList = c(\"Contribution\",\"Certainty\",\"Connection\")){\n  vImport <<- NULL\n  \n  for(i in (1:length(arrayList))){\n    cat (\"On a scale of 1 to 5, how important is\",arrayList[i],\"?\")\n    vImportNewLine <- readline()\n    vImport <<- as.numeric(c(vImport,vImportNewLine))\n  }\n}\n\npriorityImportance <- function(arrayList = c(\"Professional certifications\", \n                                             \"On the job learning\", \"Mentorship\")){\n  pImport <<- NULL\n  \n  for(i in (1:length(arrayList))){\n    cat (\"On a scale of 1 to 5, how important is\",arrayList[i],\"?\")\n    pImportNewLine <- readline()\n    pImport <<- as.numeric(c(pImport,pImportNewLine))\n  }\n}\n\ncreatePriorityMatrix <- function(vImport = c(3,3,5),pImport = c(2,5,5),\n                                 priorities = c(\"Professional certifications\", \n                                                \"On the job learning\", \"Mentorship\"),\n                                 values = c(\"Contribution\",\"Certainty\",\"Connection\")){\n  require(dplyr)\n  \n  mat <- matrix(rep(vImport,length(pImport)),nrow = length(pImport),\n         ncol = length(vImport), \n         byrow = TRUE,dimnames = c(\n           list(priorities),\n           list(values)\n         ))*\n    matrix(rep(pImport,length(vImport)),nrow = length(pImport),\n           ncol = length(vImport),\n           byrow = FALSE)\n  \n  df <- as.data.frame(mat) %>% \n    mutate(Total = rowSums(.))\n  \n  row.names(df) <- priorities\n  \n  df\n}\n\ncreateHeatmap <- function (){\n  require(highcharter)\n  require(lazyeval)\n  require(tidyr)\n  \n  hcaes_string <- function(x, y, ...) {\n    mapping <- list(...)\n    if (!missing(x)) \n      mapping[\"x\"] <- list(x)\n    \n    if (!missing(y)) \n      mapping[\"y\"] <- list(y)\n    \n    mapping <- lapply(mapping, function(x) {\n      if (is.character(x)) {\n        parse(text = x)[[1]]\n      }\n      else {\n        x\n      }\n    })\n    mapping <- structure(mapping, class = \"uneval\")\n    mapping <- mapping[names(mapping) != \"\"]\n    class(mapping) <- c(\"hcaes\", class(mapping))\n    mapping\n  }\n  \n  hcaes_ <- hcaes_string\n  \n  data <- createPriorityMatrix(vImport,pImport,priorities,values) %>% \n    mutate(Name = row.names(.)) %>% gather(.,Values,Value,1:(length(values)+1))\n  \n  hc <- hchart(data, \"heatmap\", hcaes_(x = \"Values\", y = \"Name\", \n                                       value = \"Value\")) %>% \n    hc_xAxis(title = list(text = \"Values\")) %>% \n    hc_yAxis(title = list(text = \"Priorities\"), reversed = TRUE, \n             offset = -20, tickLength = 0, gridLineWidth = 0, \n             minorGridLineWidth = 0, labels = list(style = list(fontSize = \"8px\"))) %>% \n    hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE, \n                                                                   format = \"{point.value:,.0f}\")), stacking = \"normal\") %>% \n    hc_title(text = \"Priority Matrix\") %>% \n    hc_subtitle(text = \"A priority matrix shows relative importance of priorities aligned with values\") %>% \n    hc_legend(layout = \"vertical\", verticalAlign = \"top\", \n              align = \"right\", valueDecimals = 0)\n  return(hc)\n}\n\noptionImportance <- function(arrayList = c(\"Professional certifications\", \n                                             \"On the job learning\", \"Mentorship\")){\n  # Load required libraries\n  require(dplyr)\n  require(lazyeval)\n  require(stringr)\n  \n  # Enter in option name\n  cat (\"Enter the name of the option being considered:\")\n  optionName <<- str_replace_all(readline(),\" \",\".\")\n  \n  # Set option importance equal to NULL prior to loop\n  oImport <<- NULL\n  \n  # Loop through priority list to evaluate how much the option under evaluation satisfies each criteria\n  for(i in (1:length(arrayList))){\n    cat(\"On a scale of 1 to 5, how much does\",optionName,\"fulfill\",arrayList[i],\"?\")\n    oImportNewLine <- readline()\n    oImport <<- as.numeric(c(oImport,oImportNewLine))\n  }\n  \n  # Remove NA values\n  oImport <- as.numeric(na.omit(oImport))\n  \n  # Create a priority matrix and determing total for option being evaluated\n  options <- createPriorityMatrix(vImport,pImport,priorities,values) %>% \n    mutate(Names = row.names(.)) %>% select(Names,Total)\n  \n  # Create lazy eval option\n  mutate_call1 = lazyeval::interp(~a*b, \n                                  a = as.name(\"Total\"), b = oImport)\n  \n  # Modify data frame for evaluation criteria according to prioritzation matrix\n  options <- options %>%\n    mutate_(.dots = setNames(list(mutate_call1), optionName))\n  \n  # Return options data frame and add a total at the bottom\n  rbind(options,data.frame(options %>% \n                             summarise_if(is.numeric,sum,na.rm = T) %>% \n          ungroup() %>% \n          mutate(Names = \"Total\") %>% \n          select(3,1,2))\n  )\n}\n\nreadParetoOptions <- function()\n{\n  pOptions <<- NULL\n  \n  cat (\"Enter in names of Pareto options separated by commas and spaces (i.e., Option1, Option2, Option3, etc.\")\n  pOptions <<- readline()\n  pOptions <<- unlist(strsplit(pOptions, split=\", \"))\n}\n\nparetoImportance <- function(arrayList = c(\"Customer 1\",\"Customer 2\",\"Customer 3\")){\n  poImport <<- NULL\n  \n  for(i in (1:length(arrayList))){\n    cat (\"On a scale of 1 to 5, how important is\",arrayList[i],\"?\")\n    poImportNewLine <- readline()\n    poImport <<- as.numeric(c(poImport,poImportNewLine))\n  }\n}\n\ncreateParetoChart <- function(pOptions = c(\"Customer 1\",\"Customer 2\",\"Customer 3\"),poImport = c(5,3,1)){\n  require(dplyr)\n  require(highcharter)\n  \n  data <- data.frame(Names = pOptions,\n                    Values = poImport) %>%\n    mutate(Values = Values / 5 * 100) %>%\n    arrange(desc(Values)) %>%\n    mutate(CumTotal = cumsum(Values)) %>%\n    mutate(Total = sum(Values)) %>%\n    mutate(Pct = CumTotal / Total*100)\n  \n  hc <- hchart(data, \"column\", hcaes(x = Names, y = Values)) %>% \n    hc_xAxis(title = list(text = \"Priorities\")) %>% \n    hc_yAxis(title = list(text = \"Importance\"), reversed = FALSE, \n             offset = -20, tickLength = 0, gridLineWidth = 0, \n             minorGridLineWidth = 0, labels = list(style = list(fontSize = \"8px\"))) %>% \n    hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE, \n                                                                   format = \"{point.y:,.0f}\")), stacking = \"normal\") %>% \n    hc_title(text = \"Pareto Chart\") %>% \n    hc_subtitle(text = \"A pareto chart shows relative importance of competing priorities\") %>% \n    hc_add_series_df(data = data,x = Names, y = Pct,type=\"line\")\n  return(hc)\n}\n\nreadStrategyOptions <- function()\n{\n  pOptions <<- NULL\n  \n  cat (\"Enter in names of strategy options separated by commas and spaces (i.e., Option1, Option2, Option3, etc.\")\n  sOptions <<- readline()\n  sOptions <<- unlist(strsplit(sOptions, split=\", \"))\n}\n\nstrategyOptionImportance <- function(arrayList = c(\"Option 1\",\"Option 2\",\"Option 3\")){\n  soImport1 <<- NULL\n  soImport2 <<- NULL\n  \n  for(i in (1:length(arrayList))){\n    cat (\"On a scale of 1 to 5, what are the industry standards for\",arrayList[i],\"?\")\n    soImportNewLine <- readline()\n    soImport1 <<- as.numeric(c(soImport1,soImportNewLine))\n    cat (\"On a scale of 1 to 5, what are the ideal differentiated standards for\",arrayList[i],\"?\")\n    soImportNewLine <- readline()\n    soImport2 <<- as.numeric(c(soImport2,soImportNewLine))\n  }\n}\n\ncreateStrategyCanvas <- function(sOptions = c(\"Option 1\",\"Option 2\",\"Option 3\"),soImport1 = c(5,3,1),\n                                 soImport2 = c(1,3,5)){\n  require(dplyr)\n  require(highcharter)\n  require(tidyr)\n  \n  data <- data.frame(Names = sOptions,\n                     Industry = soImport1,\n                     Blue.Ocean = soImport2) %>%\n    arrange(desc(Blue.Ocean)) %>%\n    gather(Category,Value,c(Industry,Blue.Ocean))\n  \n  hc <- hchart(data, \"line\", hcaes(x = Names, y = Value, group = Category)) %>% \n    hc_xAxis(title = list(text = \"Strategic Options\")) %>% \n    hc_yAxis(title = list(text = \"Importance\"), reversed = FALSE, \n             offset = -20, tickLength = 0, gridLineWidth = 0, \n             minorGridLineWidth = 0, labels = list(style = list(fontSize = \"8px\"))) %>% \n    hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE, \n                                                                   format = \"{point.y:,.0f}\")), stacking = \"normal\") %>% \n    hc_title(text = \"Strategy Canvas\") %>% \n    hc_subtitle(text = \"A strategy canvas shows points of differentiation and purposeful strategic variance\") \n  return(hc)\n}\n",
    "created" : 1502749807562.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3576021407",
    "id" : "A41E00FF",
    "lastKnownWriteTime" : 1502842695,
    "last_content_update" : 1502842695919,
    "path" : "~/Personal Google Drive/Dropbox/Productivity/Learning/Programming/R/prioritizationMatrix/R/functions.R",
    "project_path" : "R/functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}