library(testhat)
library(priorityMatrix)
library(testthat)
library(priorityMatrix)
hcPareto <- createParetoChart()
expect_that(hcPareto,is_a("highchart"))
devtools::test()
test_check("priorityMatrix")
library(testthat)
library(priorityMatrix)
test_check("priorityMatrix")
test()
test_check("priorityMatrix")
test_check("priorityMatrix")
test_check("priorityMatrix")
test()
test()
test()
devtools::test()
document()
use_travis()
values
sum(legth(values),1)
sum(length(values),1)
createHeatmap <- function (){
require(highcharter)
require(lazyeval)
require(tidyr)
hcaes_string <- function(x, y, ...) {
mapping <- list(...)
if (!missing(x))
mapping["x"] <- list(x)
if (!missing(y))
mapping["y"] <- list(y)
mapping <- lapply(mapping, function(x) {
if (is.character(x)) {
parse(text = x)[[1]]
}
else {
x
}
})
mapping <- structure(mapping, class = "uneval")
mapping <- mapping[names(mapping) != ""]
class(mapping) <- c("hcaes", class(mapping))
mapping
}
hcaes_ <- hcaes_string
data <- createPriorityMatrix(vImport,pImport,priorities,values) %>%
mutate(Name = row.names(.)) %>% gather(.,Values,Value,1:sum(length(values),1))
hc <- hchart(data, "heatmap", hcaes_(x = "Values", y = "Name",
value = "Value")) %>%
hc_xAxis(title = list(text = "Values")) %>%
hc_yAxis(title = list(text = "Priorities"), reversed = TRUE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.value:,.0f}")), stacking = "normal") %>%
hc_title(text = "Priority Matrix") %>%
hc_subtitle(text = "A priority matrix shows relative importance of priorities aligned with values") %>%
hc_legend(layout = "vertical", verticalAlign = "top",
align = "right", valueDecimals = 0)
return(hc)
}
document()
sOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
soImport1 <- c(1,5,2,5,1)
soImport2 <- c(5,1,5,1,5)
createStrategyCanvas(sOptions,soImport1,soImport2)
createHeatmap <- function (){
require(highcharter)
require(lazyeval)
require(tidyr)
hcaes_string <- function(x, y, ...) {
mapping <- list(...)
if (!missing(x))
mapping["x"] <- list(x)
if (!missing(y))
mapping["y"] <- list(y)
mapping <- lapply(mapping, function(x) {
if (is.character(x)) {
parse(text = x)[[1]]
}
else {
x
}
})
mapping <- structure(mapping, class = "uneval")
mapping <- mapping[names(mapping) != ""]
class(mapping) <- c("hcaes", class(mapping))
mapping
}
hcaes_ <- hcaes_string
endValue <- sum(length(values),1)
data <- createPriorityMatrix(vImport,pImport,priorities,values) %>%
mutate(Name = row.names(.)) %>% gather(.,Values,Value,1:endValue)
hc <- hchart(data, "heatmap", hcaes_(x = "Values", y = "Name",
value = "Value")) %>%
hc_xAxis(title = list(text = "Values")) %>%
hc_yAxis(title = list(text = "Priorities"), reversed = TRUE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.value:,.0f}")), stacking = "normal") %>%
hc_title(text = "Priority Matrix") %>%
hc_subtitle(text = "A priority matrix shows relative importance of priorities aligned with values") %>%
hc_legend(layout = "vertical", verticalAlign = "top",
align = "right", valueDecimals = 0)
return(hc)
}
createHeatmap()
?gather_
document()
package.skeleton()
document()
setwd("../")
install("priorityMatrix")
library(devtools)
install("priorityMatrix")
install("prioritizationMatrix")
library(priorityMatrix)
priorities <- c("Compelling use case","Affordable and low cost","More convenient")
values <- c("Social Currency","Price","Design","Function","Personal Narrative")
vImport <- c(5,2,2,4,5)
pImport <- c(5,2,3)
createHeatmap()
endValue <- sum(length(values),1)
endValue
library(priorityMatrix)
priorities <- c("Compelling use case","Affordable and low cost","More convenient")
values <- c("Social Currency","Price","Design","Function","Personal Narrative")
vImport <- c(5,2,2,4,5)
pImport <- c(5,2,3)
createHeatmap()
createHeatmap <- function (){
require(highcharter)
require(lazyeval)
require(tidyr)
hcaes_string <- function(x, y, ...) {
mapping <- list(...)
if (!missing(x))
mapping["x"] <- list(x)
if (!missing(y))
mapping["y"] <- list(y)
mapping <- lapply(mapping, function(x) {
if (is.character(x)) {
parse(text = x)[[1]]
}
else {
x
}
})
mapping <- structure(mapping, class = "uneval")
mapping <- mapping[names(mapping) != ""]
class(mapping) <- c("hcaes", class(mapping))
mapping
}
hcaes_ <- hcaes_string
endValue <- sum(length(values),1)
data <- createPriorityMatrix(vImport,pImport,priorities,values) %>%
mutate(Name = row.names(.)) %>%
gather(.,Values,Value,1:endValue)
hc <- hchart(data, "heatmap", hcaes_(x = "Values", y = "Name",
value = "Value")) %>%
hc_xAxis(title = list(text = "Values")) %>%
hc_yAxis(title = list(text = "Priorities"), reversed = TRUE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.value:,.0f}")), stacking = "normal") %>%
hc_title(text = "Priority Matrix") %>%
hc_subtitle(text = "A priority matrix shows relative importance of priorities aligned with values") %>%
hc_legend(layout = "vertical", verticalAlign = "top",
align = "right", valueDecimals = 0)
return(hc)
}
createHeatmap()
length(values)+1
createHeatmap <- function (){
require(highcharter)
require(lazyeval)
require(tidyr)
hcaes_string <- function(x, y, ...) {
mapping <- list(...)
if (!missing(x))
mapping["x"] <- list(x)
if (!missing(y))
mapping["y"] <- list(y)
mapping <- lapply(mapping, function(x) {
if (is.character(x)) {
parse(text = x)[[1]]
}
else {
x
}
})
mapping <- structure(mapping, class = "uneval")
mapping <- mapping[names(mapping) != ""]
class(mapping) <- c("hcaes", class(mapping))
mapping
}
hcaes_ <- hcaes_string
data <- createPriorityMatrix(vImport,pImport,priorities,values) %>%
mutate(Name = row.names(.)) %>%
gather(.,Values,Value,1:length(values)+1)
hc <- hchart(data, "heatmap", hcaes_(x = "Values", y = "Name",
value = "Value")) %>%
hc_xAxis(title = list(text = "Values")) %>%
hc_yAxis(title = list(text = "Priorities"), reversed = TRUE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.value:,.0f}")), stacking = "normal") %>%
hc_title(text = "Priority Matrix") %>%
hc_subtitle(text = "A priority matrix shows relative importance of priorities aligned with values") %>%
hc_legend(layout = "vertical", verticalAlign = "top",
align = "right", valueDecimals = 0)
return(hc)
}
createHeatmap()
pOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
poImport <- c(5,2,2,4,5)
createParetoChart(pOptions,poImport)
sOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
soImport1 <- c(1,5,2,5,1)
soImport2 <- c(5,1,5,1,5)
createStrategyCanvas(sOptions,soImport1,soImport2)
readValues()
readPriorities()
valuesImportance()
readValues()
readPriorities()
valuesImportance()
valuesImportance(values)
priorityImportance(priorities)
optionImportance(priorities)
readParetoOptions()
rm(oImport)
paretoImportance(pOptions)
createParetoChart()
createParetoChart(poImport)
poImport
createParetoChart(pOptions,poImport)
4/6
readStrategyOptions()
strategyOptionImportance(sOptions)
strategyOptionImportance(sOptions)
createStrategyCanvas(sOptions,soImport1,soImport2)
?assign
environment()
assign("test",1,envr = .GlobalEnv)
assign("test",1,envir = .GlobalEnv)
rm(test)
valuesImportance <- function(arrayList = c("Contribution","Certainty","Connection")){
assign("vImport",NULL,envir = .GlobalEnv)
for(i in (1:length(arrayList))){
cat ("On a scale of 1 to 5, how important is",arrayList[i],"?")
vImportNewLine <- readline()
assign("vImport",as.numeric(c(vImport,vImportNewLine)),envir = .GlobalEnv)
}
}
valuesImportance(values)
rm(optionName)
optionImportance <- function(arrayList = c("Professional certifications",
"On the job learning", "Mentorship")){
# Load required libraries
requireNamespace(dplyr)
require(lazyeval)
require(stringr)
# Enter in option name
cat ("Enter the name of the option being considered:")
optionName <- str_replace_all(readline()," ",".")
# Set option importance equal to NULL prior to loop
oImport <- NULL
# Loop through priority list to evaluate how much the option under evaluation satisfies each criteria
for(i in (1:length(arrayList))){
cat("On a scale of 1 to 5, how much does",optionName,"fulfill",arrayList[i],"?")
oImportNewLine <- readline()
oImport <- as.numeric(c(oImport,oImportNewLine))
}
# Remove NA values
oImport <- as.numeric(na.omit(oImport))
# Create a priority matrix and determing total for option being evaluated
options <- createPriorityMatrix(vImport,pImport,priorities,values) %>%
mutate(Names = row.names(.)) %>% select(Names,Total)
# Create lazy eval option
mutate_call1 = lazyeval::interp(~a*b,
a = as.name("Total"), b = oImport)
# Modify data frame for evaluation criteria according to prioritzation matrix
options <- options %>%
mutate_(.dots = setNames(list(mutate_call1), optionName))
# Return options data frame and add a total at the bottom
rbind(options,data.frame(options %>%
summarise_if(is.numeric,sum,na.rm = T) %>%
ungroup() %>%
mutate(Names = "Total") %>%
select(3,1,2))
)
}
optionImportance(priorities)
requireNamespace("dplyr")
requireNamespace("dplyr")
requireNamespace("lazyeval")
requireNamespace("stringr")
document()
library(devtools)
getenv()
getwd()
setwd("prioritizationMatrix")
document()
library(roxygen2)
document()
?use_data
use_data(c(pImport,poImport,pOptions,priorities,soImport1,soImport2,sOptions,values,vImport))
ls
ls()
use_data(ls())
use_data(pImport,poImport,pOptions,priorities,soImport1,soImport2,sOptions,values,vImport)
document()
library("priorityMatrix", lib.loc="/usr/local/lib/R/3.4/site-library")
detach("package:priorityMatrix", unload=TRUE)
setwd("../")
install("prioritizationMatrix")
library(devtools)
devtools::check()
getwd()
setwd("prioritizationMatrix")
getwd()
devtools::check()
document()
na.omit
?na.omit
?setNames
document()
document()
document()
devtools::check()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE, screenshot.opts = list(delay = 10))
library(priorityMatrix)
priorities <- c("Compelling use case","Affordable and low cost","More convenient")
values <- c("Social Currency","Price","Design","Function","Personal Narrative")
vImport <- c(5,2,2,4,5)
pImport <- c(5,2,3)
hc1 <- createHeatmap(vImport,pImport,values,priorities)
library(priorityMatrix)
priorities <- c("Compelling use case","Affordable and low cost","More convenient")
values <- c("Social Currency","Price","Design","Function","Personal Narrative")
vImport <- c(5,2,2,4,5)
pImport <- c(5,2,3)
createHeatmap(vImport,pImport,priorities,values)
library(priorityMatrix)
priorities <- c("Compelling use case","Affordable and low cost","More convenient")
values <- c("Social Currency","Price","Design","Function","Personal Narrative")
vImport <- c(5,2,2,4,5)
pImport <- c(5,2,3)
createHeatmap(vImport,pImport,priorities,values)
pOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
poImport <- c(5,2,2,4,5)
createParetoChart(pOptions,poImport)
sOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
soImport1 <- c(1,5,2,5,1)
soImport2 <- c(5,1,5,1,5)
createStrategyCanvas(sOptions,soImport1,soImport2)
document()
createHeatmap <- function (vImport,pImport,priorities,values){
requireNamespace("highcharter")
requireNamespace("lazyeval")
requireNamespace("tidyr")
hcaes_string <- function(x, y, ...) {
mapping <- list(...)
if (!missing(x))
mapping["x"] <- list(x)
if (!missing(y))
mapping["y"] <- list(y)
mapping <- lapply(mapping, function(x) {
if (is.character(x)) {
parse(text = x)[[1]]
}
else {
x
}
})
mapping <- structure(mapping, class = "uneval")
mapping <- mapping[names(mapping) != ""]
class(mapping) <- c("hcaes", class(mapping))
mapping
}
hcaes_ <- hcaes_string
data <- createPriorityMatrix(vImport,pImport,priorities,values) %>%
mutate(Name = row.names(.)) %>%
gather(.,Values,Value,1:length(values)+1)
hc <- hchart(data, "heatmap", hcaes_(x = "Values", y = "Name",
value = "Value")) %>%
hc_xAxis(title = list(text = "Values")) %>%
hc_yAxis(title = list(text = "Priorities"), reversed = TRUE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.value:,.0f}")), stacking = "normal") %>%
hc_title(text = "Priority Matrix") %>%
hc_subtitle(text = "A priority matrix shows relative importance of priorities aligned with values") %>%
hc_legend(layout = "vertical", verticalAlign = "top",
align = "right", valueDecimals = 0)
return(hc)
}
library(priorityMatrix)
priorities <- c("Compelling use case","Affordable and low cost","More convenient")
values <- c("Social Currency","Price","Design","Function","Personal Narrative")
vImport <- c(5,2,2,4,5)
pImport <- c(5,2,3)
createHeatmap(vImport,pImport,priorities,values)
document()
library("priorityMatrix", lib.loc="/usr/local/lib/R/3.4/site-library")
detach("package:priorityMatrix", unload=TRUE)
setwd("../")
setwd("prioritizationMatrix")
document()
devtools::check()
devtools::check()
document()
devtools::check()
document()
document()
document()
devtools::check()
createParetoChart <- function(pOptions = c("Customer 1","Customer 2","Customer 3"),poImport = c(5,3,1)){
requireNamespace("dplyr")
requireNamespace("highcharter")
data <- data.frame(Names = pOptions,
Values = poImport) %>%
mutate(Values = Values / 5 * 100) %>%
arrange(desc(Values)) %>%
mutate(CumTotal = cumsum(Values)) %>%
mutate(Total = sum(Values)) %>%
mutate(Pct = CumTotal / Total*100)
hc <- hchart(data, "column", hcaes(x = Names, y = Values)) %>%
hc_xAxis(title = list(text = "Priorities")) %>%
hc_yAxis(title = list(text = "Importance"), reversed = FALSE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.y:,.0f}")), stacking = "normal") %>%
hc_title(text = "Pareto Chart") %>%
hc_subtitle(text = "A pareto chart shows relative importance of competing priorities") %>%
hc_add_series(data = data,x = Names, y = Pct,type="line")
return(hc)
}
pOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
poImport <- c(5,2,2,4,5)
createParetoChart(pOptions,poImport)
createParetoChart <- function(pOptions = c("Customer 1","Customer 2","Customer 3"),poImport = c(5,3,1)){
requireNamespace("dplyr")
requireNamespace("highcharter")
data <- data.frame(Names = pOptions,
Values = poImport) %>%
mutate(Values = Values / 5 * 100) %>%
arrange(desc(Values)) %>%
mutate(CumTotal = cumsum(Values)) %>%
mutate(Total = sum(Values)) %>%
mutate(Pct = CumTotal / Total*100)
hc <- hchart(data, "column", hcaes(x = Names, y = Values)) %>%
hc_xAxis(title = list(text = "Priorities")) %>%
hc_yAxis(title = list(text = "Importance"), reversed = FALSE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.y:,.0f}")), stacking = "normal") %>%
hc_title(text = "Pareto Chart") %>%
hc_subtitle(text = "A pareto chart shows relative importance of competing priorities") %>%
hc_add_series(data = data,x = data$Names, y = data$Pct,type="line")
return(hc)
}
pOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
poImport <- c(5,2,2,4,5)
createParetoChart(pOptions,poImport)
createParetoChart <- function(pOptions = c("Customer 1","Customer 2","Customer 3"),poImport = c(5,3,1)){
requireNamespace("dplyr")
requireNamespace("highcharter")
data <- data.frame(Names = pOptions,
Values = poImport) %>%
mutate(Values = Values / 5 * 100) %>%
arrange(desc(Values)) %>%
mutate(CumTotal = cumsum(Values)) %>%
mutate(Total = sum(Values)) %>%
mutate(Pct = CumTotal / Total*100)
hc <- hchart(data, "column", hcaes(x = Names, y = Values)) %>%
hc_xAxis(title = list(text = "Priorities")) %>%
hc_yAxis(title = list(text = "Importance"), reversed = FALSE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.y:,.0f}")), stacking = "normal") %>%
hc_title(text = "Pareto Chart") %>%
hc_subtitle(text = "A pareto chart shows relative importance of competing priorities") %>%
hc_add_series_df(data = data,x = Names, y = Pct,type="line")
return(hc)
}
document()
pOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
poImport <- c(5,2,2,4,5)
createParetoChart(pOptions,poImport)
devtools::check()
install.packages("qpdf",dependencies = TRUE, repos = "http://cran.rstudio.com/")
install_github("qpdf/qpdf")
devtools::check()
document()
library("priorityMatrix", lib.loc="/usr/local/lib/R/3.4/site-library")
detach("package:priorityMatrix", unload=TRUE)
setwd("../")
install("prioritzationMatrix")
install("prioritizationMatrix")
