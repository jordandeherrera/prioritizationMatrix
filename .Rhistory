mutate(Values = Values / 5 * 100) %>%
arrange(desc(Values)) %>%
mutate(CumTotal = cumsum(Values)) %>%
mutate(Total = sum(Values)) %>%
mutate(Pct = CumTotal / Total*100)
hc <- hchart(data, "column", hcaes(x = Names, y = Values)) %>%
hc_xAxis(title = list(text = "Priorities")) %>%
hc_yAxis(title = list(text = "Importance"), reversed = FALSE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.y:,.0f}")), stacking = "normal") %>%
hc_title(text = "Pareto Chart") %>%
hc_subtitle(text = "A pareto chart shows relative importance of competing priorities") %>%
hc_add_series_df(data = data,x = Names, y = Pct,type="line")
return(hc)
}
readParetoOptions()
pOptions
readParetoOptions()
paretoImportance(pOptions)
createParetoChart(pOptions,poImport)
createHeatmap()
createParetoChart(pOptions,poImport)
createHeatmap()
passiveIncome
uber %>% inner_join(wfh) %>% inner_join(passiveIncome)
readStrategyOptions <- function()
{
pOptions <<- NULL
cat ("Enter in names of strategy options separated by commas and spaces (i.e., Option1, Option2, Option3, etc.")
sOptions <<- readline()
sOptions <<- unlist(strsplit(sOptions, split=", "))
}
strategyOptionImportance <- function(arrayList = c("Option 1","Option 2","Option 3")){
poImport <<- NULL
for(i in (1:length(arrayList))){
cat ("On a scale of 1 to 5, how important is",arrayList[i],"to customers ?")
soImportNewLine <- readline()
soImport <<- as.numeric(c(soImport,soImportNewLine))
}
}
strategyOptionImportance <- function(arrayList = c("Option 1","Option 2","Option 3")){
poImport <<- NULL
for(i in (1:length(arrayList))){
cat ("On a scale of 1 to 5, what are the industry standards for",arrayList[i],"?")
soImportNewLine <- readline()
soImport1 <<- as.numeric(c(soImport1,soImportNewLine))
cat ("On a scale of 1 to 5, what are the ideal differentiated standards for",arrayList[i],"?")
soImportNewLine <- readline()
soImport2 <<- as.numeric(c(soImport2,soImportNewLine))
}
}
readStrategyOptions <- function()
{
pOptions <<- NULL
cat ("Enter in names of strategy options separated by commas and spaces (i.e., Option1, Option2, Option3, etc.")
sOptions <<- readline()
sOptions <<- unlist(strsplit(sOptions, split=", "))
}
strategyOptionImportance <- function(arrayList = c("Option 1","Option 2","Option 3")){
poImport <<- NULL
for(i in (1:length(arrayList))){
cat ("On a scale of 1 to 5, what are the industry standards for",arrayList[i],"?")
soImportNewLine <- readline()
soImport1 <<- as.numeric(c(soImport1,soImportNewLine))
cat ("On a scale of 1 to 5, what are the ideal differentiated standards for",arrayList[i],"?")
soImportNewLine <- readline()
soImport2 <<- as.numeric(c(soImport2,soImportNewLine))
}
}
readStrategyOptions()
strategyOptionImportance(sOptions)
strategyOptionImportance <- function(arrayList = c("Option 1","Option 2","Option 3")){
soImport1 <<- NULL
soImport2 <<- NULL
for(i in (1:length(arrayList))){
cat ("On a scale of 1 to 5, what are the industry standards for",arrayList[i],"?")
soImportNewLine <- readline()
soImport1 <<- as.numeric(c(soImport1,soImportNewLine))
cat ("On a scale of 1 to 5, what are the ideal differentiated standards for",arrayList[i],"?")
soImportNewLine <- readline()
soImport2 <<- as.numeric(c(soImport2,soImportNewLine))
}
}
strategyOptionImportance(sOptions)
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
gather(Category,Value,c(1,2))
soImport1
soImport2
sOptions
data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2)
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
gather(Category,Value,c(2,3))
data
hchart(data, "line", hcaes(x = Names, y = Value, group = Category))
hchart(data, "line", hcaes(x = Names, y = Value, group = Category)) %>%
hc_xAxis(title = list(text = "Strategic Options")) %>%
hc_yAxis(title = list(text = "Importance"), reversed = FALSE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.y:,.0f}")), stacking = "normal") %>%
hc_title(text = "Strategy Canvas") %>%
hc_subtitle(text = "A strategy canvas shows points of differentiation and purposeful strategic variance")
createStrategyCanvas <- function(sOptions = c("Option 1","Option 2","Option 3"),soImport1 = c(5,3,1),
soImport2 = c(1,3,5)){
require(dplyr)
require(highcharter)
require(tidyr)
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
gather(Category,Value,c(2,3)) %>%
arrange(desc(soImport2))
hc <- hchart(data, "line", hcaes(x = Names, y = Value, group = Category)) %>%
hc_xAxis(title = list(text = "Strategic Options")) %>%
hc_yAxis(title = list(text = "Importance"), reversed = FALSE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.y:,.0f}")), stacking = "normal") %>%
hc_title(text = "Strategy Canvas") %>%
hc_subtitle(text = "A strategy canvas shows points of differentiation and purposeful strategic variance")
return(hc)
}
createStrategyCanvas(sOptions,soImport1,soImport2)
soImport2
soImport1
sOptions
require(dplyr)
require(highcharter)
require(tidyr)
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
gather(Category,Value,c(2,3)) %>%
arrange(desc(soImport2))
data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2)
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
gather(Category,Value,c(1,2)) %>%
arrange(desc(soImport2))
data
hc <- hchart(data, "line", hcaes(x = Names, y = Value, group = Category)) %>%
hc_xAxis(title = list(text = "Strategic Options")) %>%
hc_yAxis(title = list(text = "Importance"), reversed = FALSE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.y:,.0f}")), stacking = "normal") %>%
hc_title(text = "Strategy Canvas") %>%
hc_subtitle(text = "A strategy canvas shows points of differentiation and purposeful strategic variance")
hc
createStrategyCanvas <- function(sOptions = c("Option 1","Option 2","Option 3"),soImport1 = c(5,3,1),
soImport2 = c(1,3,5)){
require(dplyr)
require(highcharter)
require(tidyr)
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
gather(Category,Value,c(1,2)) %>%
arrange(desc(soImport2))
hc <- hchart(data, "line", hcaes(x = Names, y = Value, group = Category)) %>%
hc_xAxis(title = list(text = "Strategic Options")) %>%
hc_yAxis(title = list(text = "Importance"), reversed = FALSE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.y:,.0f}")), stacking = "normal") %>%
hc_title(text = "Strategy Canvas") %>%
hc_subtitle(text = "A strategy canvas shows points of differentiation and purposeful strategic variance")
return(hc)
}
createStrategyCanvas(sOptions,soImport1,soImport2)
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
gather(Category,Value,c(Industry,Blue.Ocean))
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
gather(Category,Value,c(Industry,Blue.Ocean)) %>%
arrange(desc(Blue.Ocean))
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
gather(Category,Value,c(Industry,Blue.Ocean))
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
arrange(desc(Blue.Ocean)) %>%
gather(Category,Value,c(Industry,Blue.Ocean))
data
createStrategyCanvas <- function(sOptions = c("Option 1","Option 2","Option 3"),soImport1 = c(5,3,1),
soImport2 = c(1,3,5)){
require(dplyr)
require(highcharter)
require(tidyr)
data <- data.frame(Names = sOptions,
Industry = soImport1,
Blue.Ocean = soImport2) %>%
arrange(desc(Blue.Ocean)) %>%
gather(Category,Value,c(Industry,Blue.Ocean))
hc <- hchart(data, "line", hcaes(x = Names, y = Value, group = Category)) %>%
hc_xAxis(title = list(text = "Strategic Options")) %>%
hc_yAxis(title = list(text = "Importance"), reversed = FALSE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.y:,.0f}")), stacking = "normal") %>%
hc_title(text = "Strategy Canvas") %>%
hc_subtitle(text = "A strategy canvas shows points of differentiation and purposeful strategic variance")
return(hc)
}
createStrategyCanvas(sOptions,soImport1,soImport2)
readValues()
readPriorities()
valuesImportance(values)
priorityImportance(priorities)
readPriorities()
priorityImportance(priorities)
createHeatmap()
condo <- optionImportance(priorities)
require(dplyr)
require(lazyeval)
require(stringr)
cat ("Enter the name of the option being considered:")
optionName <<- str_replace_all(readline()," ",".")
oImport <<- NULL
oImport
for(i in (1:length(arrayList))){
cat("On a scale of 1 to 5, how much does",optionName,"fulfill",arrayList[i],"?")
oImportNewLine <- readline()
oImport <<- as.numeric(c(oImport,oImportNewLine))
}
priorities
arrayList <- priorities
for(i in (1:length(arrayList))){
cat("On a scale of 1 to 5, how much does",optionName,"fulfill",arrayList[i],"?")
oImportNewLine <- readline()
oImport <<- as.numeric(c(oImport,oImportNewLine))
}
oImport <- as.numeric(na.omit(oImport))
options <- createPriorityMatrix(vImport,pImport,priorities,values) %>%
mutate(Names = row.names(.)) %>% select(Names,Total)
mutate_call1 = lazyeval::interp(~a*b,
a = as.name("Total"), b = oImport)
options <- options %>%
mutate_(.dots = setNames(list(mutate_call1), optionName))
rbind(options,data.frame(options %>%
summarise_if(is.numeric,sum,na.rm = T) %>%
ungroup() %>%
mutate(Names = "Total") %>%
select(3,1,2))
)
condo <- optionImportance(priorities)
condo
condo <- optionImportance(priorities)
mansion <- optionImportance(priorities)
ranch <- optionImportance(priorities)
condo %>% inner_join(mansion) %>% inner_join(ranch)
readParetoOptions()
paretoImportance(pOptions)
createParetoChart(pOptions,poImport)
readParetoOptions()
paretoImportance(pOptions)
createParetoChart(pOptions,poImport)
readStrategyOptions()
strategyOptionImportance(sOptions)
createStrategyCanvas(sOptions,soImport1,soImport2)
readValues()
readPriorities()
valuesImportance(values)
valuesImportance(values)
priorityImportance(priorities)
createHeatmap()
elearning <- optionImportance(priorities)
saas <- optionImportance(priorities)
realEstate <- optionImportance(priorities)
elearning %>% inner_join(saas) %>% inner_join(realEstate)
createHeatmap()
readParetoOptions()
paretoImportance(pOptions)
paretoImportance(pOptions)
createParetoChart(pOptions,poImport)
readStrategyOptions()
strategyOptionImportance(sOptions)
createStrategyCanvas(sOptions,soImport1,soImport2)
strategyOptionImportance(sOptions)
createStrategyCanvas(sOptions,soImport1,soImport2)
createHeatmap()
elearning %>% inner_join(saas) %>% inner_join(realEstate)
createParetoChart(pOptions,poImport)
pOptions
readParetoOptions()
poImport
createParetoChart(pOptions,poImport)
createStrategyCanvas(sOptions,soImport1,soImport2)
devtools::use_vignette
getwd()
setwd("prioritizationMatrix")
getwd()
devtools::use_vignette()
devtools::use_vignette("lemonadeStand")
valuesImportance()
priorityImportance
priorityImportance()
document()
priorities
createPriorityMatrix()
optionImportance
optionImportance()
readParetoOptions()
paretoImportance(pOptions)
paretoImportance(pOptions)
readStrategyOptions <- function()
{
sOptions <<- NULL
cat ("Enter in names of strategy options separated by commas and spaces (i.e., Option1, Option2, Option3, etc.")
sOptions <<- readline()
sOptions <<- unlist(strsplit(sOptions, split=", "))
}
readStrategyOptions
readStrategyOptions()
strategyOptionImportance(sOptions)
strategyOptionImportance(sOptions)
strategyOptionImportance(sOptions)
library(devtools)
getwd()
document()
createHeatmap()
setwd("../
")
setwd("../")
getwd()
install("prioritizationMatrix")
readValues()
valueImportance
valueImportance()
valuesImportance()
valuesImportance(values)
readPriorities()
priorityImportance(priorities)
priorities
values
vImport
pImport
knitr::opts_chunk$set(echo = TRUE)
library(priorityMatrix)
priorities <- c("Compelling use case","Affordable and low cost","More convenient")
values <- c("Social Currency","Price","Design","Function","Personal Narrative")
vImport <- c(5,2,2,4,5)
pImport <- c(5,2,3)
createHeatmap()
optionImportance(priorities)
document()
library(devtools)
getwd()
detach("package:priorityMatrix", unload=TRUE)
getwd()
setwd("prioritizationMatrix")
getwd()
document()
pOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
poImport <- c(5,2,2,4,5)
createParetoChart()
pOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
poImport <- c(5,2,2,4,5)
createParetoChart(pOptions,poImport)
library(priorityMatrix)
priorities <- c("Compelling use case","Affordable and low cost","More convenient")
values <- c("Social Currency","Price","Design","Function","Personal Narrative")
vImport <- c(5,2,2,4,5)
pImport <- c(5,2,3)
createHeatmap()
sOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
soImport1 <- c(1,5,2,5,1)
soImport2 <- c(5,1,5,1,5)
createStrategyCanvas(sOptions,soImport1,soImport2)
document()
devtools::use_testthat()
devtools::use_travis()
createParetoChart()
hcPareto <- createParetoChart()
class(hcPareto)
expect_that(hcPareto,is_a("highchart"))
library(testhat)
library(priorityMatrix)
library(testthat)
library(priorityMatrix)
hcPareto <- createParetoChart()
expect_that(hcPareto,is_a("highchart"))
devtools::test()
test_check("priorityMatrix")
library(testthat)
library(priorityMatrix)
test_check("priorityMatrix")
test()
test_check("priorityMatrix")
test_check("priorityMatrix")
test_check("priorityMatrix")
test()
test()
test()
devtools::test()
document()
use_travis()
values
sum(legth(values),1)
sum(length(values),1)
createHeatmap <- function (){
require(highcharter)
require(lazyeval)
require(tidyr)
hcaes_string <- function(x, y, ...) {
mapping <- list(...)
if (!missing(x))
mapping["x"] <- list(x)
if (!missing(y))
mapping["y"] <- list(y)
mapping <- lapply(mapping, function(x) {
if (is.character(x)) {
parse(text = x)[[1]]
}
else {
x
}
})
mapping <- structure(mapping, class = "uneval")
mapping <- mapping[names(mapping) != ""]
class(mapping) <- c("hcaes", class(mapping))
mapping
}
hcaes_ <- hcaes_string
data <- createPriorityMatrix(vImport,pImport,priorities,values) %>%
mutate(Name = row.names(.)) %>% gather(.,Values,Value,1:sum(length(values),1))
hc <- hchart(data, "heatmap", hcaes_(x = "Values", y = "Name",
value = "Value")) %>%
hc_xAxis(title = list(text = "Values")) %>%
hc_yAxis(title = list(text = "Priorities"), reversed = TRUE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.value:,.0f}")), stacking = "normal") %>%
hc_title(text = "Priority Matrix") %>%
hc_subtitle(text = "A priority matrix shows relative importance of priorities aligned with values") %>%
hc_legend(layout = "vertical", verticalAlign = "top",
align = "right", valueDecimals = 0)
return(hc)
}
document()
sOptions <- c("Social Currency","Price","Design","Function","Personal Narrative")
soImport1 <- c(1,5,2,5,1)
soImport2 <- c(5,1,5,1,5)
createStrategyCanvas(sOptions,soImport1,soImport2)
createHeatmap <- function (){
require(highcharter)
require(lazyeval)
require(tidyr)
hcaes_string <- function(x, y, ...) {
mapping <- list(...)
if (!missing(x))
mapping["x"] <- list(x)
if (!missing(y))
mapping["y"] <- list(y)
mapping <- lapply(mapping, function(x) {
if (is.character(x)) {
parse(text = x)[[1]]
}
else {
x
}
})
mapping <- structure(mapping, class = "uneval")
mapping <- mapping[names(mapping) != ""]
class(mapping) <- c("hcaes", class(mapping))
mapping
}
hcaes_ <- hcaes_string
endValue <- sum(length(values),1)
data <- createPriorityMatrix(vImport,pImport,priorities,values) %>%
mutate(Name = row.names(.)) %>% gather(.,Values,Value,1:endValue)
hc <- hchart(data, "heatmap", hcaes_(x = "Values", y = "Name",
value = "Value")) %>%
hc_xAxis(title = list(text = "Values")) %>%
hc_yAxis(title = list(text = "Priorities"), reversed = TRUE,
offset = -20, tickLength = 0, gridLineWidth = 0,
minorGridLineWidth = 0, labels = list(style = list(fontSize = "8px"))) %>%
hc_plotOptions(series = list(boderWidth = 0, dataLabels = list(enabled = TRUE,
format = "{point.value:,.0f}")), stacking = "normal") %>%
hc_title(text = "Priority Matrix") %>%
hc_subtitle(text = "A priority matrix shows relative importance of priorities aligned with values") %>%
hc_legend(layout = "vertical", verticalAlign = "top",
align = "right", valueDecimals = 0)
return(hc)
}
createHeatmap()
?gather_
document()
package.skeleton()
document()
